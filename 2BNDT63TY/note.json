{"paragraphs":[{"text":"%md\n\n# Machine Learning with Spark\n**Note**: this lab is left for reference purposes only and will be eventually removed as it does not qualify as a beginner Machine Learning lab based on feedback from the community.\n\nAuthor: Robert Hryniewicz\nTwitter: @RobHryniewicz\n\nLast updated: Aug 1st, 2016 (ver 0.1)","dateUpdated":"2016-08-01T22:32:07+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905736_2089105425","id":"20160531-234527_1318957937","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Machine Learning with Spark</h1>\n<p><strong>Note</strong>: this lab is left for reference purposes only and will be eventually removed as it does not qualify as a beginner Machine Learning lab based on feedback from the community.</p>\n<p>Author: Robert Hryniewicz\n<br  />Twitter: @RobHryniewicz</p>\n<p>Last updated: Aug 1st, 2016 (ver 0.1)</p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","dateStarted":"2016-08-01T22:32:07+0000","dateFinished":"2016-08-01T22:32:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2356","focus":true},{"title":"Introduction","text":"%md\n\nIn this lab you will run a few examples covering both *unsupervised* learning, such as K-Means clustering, as well as *supervised* learning, such as Decision Trees and Random Forests. The purpose of this lab is to get you started exploring machine learning algorithms without going into mathematical details of what goes on behind the scenes.\n#\nWe will cover several examples that are part of Apache Spark package using both the original Spark MLlib API as well as the newer Spark ML API.\n#\nOnce you're done, you should have a better feel for the powerful Machine Learning libraries that are part of Apache Spark.\n#\nFor a complete documentation checkout the official Apache Spark [Machine Learning Library (MLlib) Guide](http://spark.apache.org/docs/latest/mllib-guide.html).\n#","dateUpdated":"2016-08-01T22:32:07+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905736_2089105425","id":"20160531-234527_2012845753","result":{"code":"SUCCESS","type":"HTML","msg":"<p>In this lab you will run a few examples covering both <em>unsupervised</em> learning, such as K-Means clustering, as well as <em>supervised</em> learning, such as Decision Trees and Random Forests. The purpose of this lab is to get you started exploring machine learning algorithms without going into mathematical details of what goes on behind the scenes.</p>\n<h1></h1>\n<p>We will cover several examples that are part of Apache Spark package using both the original Spark MLlib API as well as the newer Spark ML API.</p>\n<h1></h1>\n<p>Once you're done, you should have a better feel for the powerful Machine Learning libraries that are part of Apache Spark.</p>\n<h1></h1>\n<p>For a complete documentation checkout the official Apache Spark <a href=\"http://spark.apache.org/docs/latest/mllib-guide.html\">Machine Learning Library (MLlib) Guide</a>.</p>\n<h1></h1>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2357","dateFinished":"2016-08-01T22:32:07+0000","dateStarted":"2016-08-01T22:32:07+0000"},{"title":"Programming Language: Scala","text":"%md\n\nThroughout this lab we will use basic Scala syntax. If you would like to learn more about Scala, here's an excellent [Scala Tutorial](http://www.dhgarrette.com/nlpclass/scala/basics.html).","dateUpdated":"2016-08-01T22:32:07+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905736_2089105425","id":"20160531-234527_588679480","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Throughout this lab we will use basic Scala syntax. If you would like to learn more about Scala, here's an excellent <a href=\"http://www.dhgarrette.com/nlpclass/scala/basics.html\">Scala Tutorial</a>.</p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2358","dateFinished":"2016-08-01T22:32:07+0000","dateStarted":"2016-08-01T22:32:07+0000"},{"title":"Lab Pre-Check","text":"%md\n\nBefore we proceed, let's verify your Spark Version. You should be running at minimum Spark 1.6.\n#\n**Note**: The first time you run `sc.version` in the paragraph below, several services will initialize in the background. This may take **1~2 min** so please **be patient**. Afterwards, each paragraph should run much more quickly since all the services will already be running in the background.","dateUpdated":"2016-08-01T22:32:07+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905736_2089105425","id":"20160531-234527_478858631","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Before we proceed, let's verify your Spark Version. You should be running at minimum Spark 1.6.</p>\n<h1></h1>\n<p><strong>Note</strong>: The first time you run <code>sc.version</code> in the paragraph below, several services will initialize in the background. This may take <strong>1~2 min</strong> so please <strong>be patient</strong>. Afterwards, each paragraph should run much more quickly since all the services will already be running in the background.</p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2359","dateFinished":"2016-08-01T22:32:07+0000","dateStarted":"2016-08-01T22:32:07+0000"},{"text":"%md\nTo run a paragraph in a Zeppelin notebook you can either click the `play` button (blue triangle) on the right-hand side or simply press `Shift + Enter`.","dateUpdated":"2016-08-01T22:32:07+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905736_2089105425","id":"20160531-234527_1555785908","result":{"code":"SUCCESS","type":"HTML","msg":"<p>To run a paragraph in a Zeppelin notebook you can either click the <code>play</code> button (blue triangle) on the right-hand side or simply press <code>Shift + Enter</code>.</p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2360","dateFinished":"2016-08-01T22:32:07+0000","dateStarted":"2016-08-01T22:32:07+0000"},{"title":"Unsupervised Learning: K-Means Clustering","text":"%md\n\n#### Unsupervised Learning\n\n\"Unsupervised learning is the machine learning task of inferring a function to describe hidden structure from unlabeled data. Since the examples given to the learner are unlabeled, there is no error or reward signal to evaluate a potential solution. This distinguishes unsupervised learning from supervised learning and reinforcement learning.\" - [wikipedia](https://en.wikipedia.org/wiki/Unsupervised_learning)\n#\n#### K-Means Clustering\n\nK-Means is one of the most commonly used clustering algorithms that clusters the data points into a predefined number of clusters. (See [Spark docs](http://spark.apache.org/docs/latest/ml-clustering.html) for more info.)\n#\nWe will use Spark ML API to generate a K-Means model using the Spark ML KMeans class. \n#\nKMeans is implemented as an Estimator and generates a KMeansModel as the base model.\n#\nNote that the data points for the training are hardcoded in the example below. Before you run the K-Means sample code, try to guess what the two cluster centers should be based on the training data.\n#","dateUpdated":"2016-08-01T22:32:07+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905736_2089105425","id":"20160531-234527_332869884","result":{"code":"SUCCESS","type":"HTML","msg":"<h4>Unsupervised Learning</h4>\n<p>&ldquo;Unsupervised learning is the machine learning task of inferring a function to describe hidden structure from unlabeled data. Since the examples given to the learner are unlabeled, there is no error or reward signal to evaluate a potential solution. This distinguishes unsupervised learning from supervised learning and reinforcement learning.&rdquo; - <a href=\"https://en.wikipedia.org/wiki/Unsupervised_learning\">wikipedia</a></p>\n<h1></h1>\n<h4>K-Means Clustering</h4>\n<p>K-Means is one of the most commonly used clustering algorithms that clusters the data points into a predefined number of clusters. (See <a href=\"http://spark.apache.org/docs/latest/ml-clustering.html\">Spark docs</a> for more info.)</p>\n<h1></h1>\n<p>We will use Spark ML API to generate a K-Means model using the Spark ML KMeans class.</p>\n<h1></h1>\n<p>KMeans is implemented as an Estimator and generates a KMeansModel as the base model.</p>\n<h1></h1>\n<p>Note that the data points for the training are hardcoded in the example below. Before you run the K-Means sample code, try to guess what the two cluster centers should be based on the training data.</p>\n<h1></h1>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2361","dateFinished":"2016-08-01T22:32:07+0000","dateStarted":"2016-08-01T22:32:07+0000"},{"text":"import org.apache.spark.ml.clustering.KMeans\nimport org.apache.spark.mllib.linalg.Vectors\n\nimport org.apache.spark.sql.{DataFrame, SQLContext} \n\nval sqlContext = new SQLContext(sc)\n\n// Crates a DataFrame\nval dataset: DataFrame = sqlContext.createDataFrame(Seq(\n  (1, Vectors.dense(0.0, 0.0, 0.0)),\n  (2, Vectors.dense(0.1, 0.1, 0.1)),\n  (3, Vectors.dense(0.2, 0.2, 0.2)),\n  (4, Vectors.dense(3.0, 3.0, 3.0)),\n  (5, Vectors.dense(3.1, 3.1, 3.1)),\n  (6, Vectors.dense(3.2, 3.2, 3.2))\n)).toDF(\"id\", \"features\")\n\n// Trains a k-means model\nval kmeans = new KMeans()\n  .setK(2)                              // set number of clusters\n  .setFeaturesCol(\"features\")\n  .setPredictionCol(\"prediction\")\nval model = kmeans.fit(dataset)\n\n// Shows the result\nprintln(\"Final Centers: \")\nmodel.clusterCenters.foreach(println)","dateUpdated":"2016-08-01T22:32:07+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905736_2089105425","id":"20160531-234527_349239953","dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2362","dateFinished":"2016-08-01T22:32:10+0000","dateStarted":"2016-08-01T22:32:08+0000","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.ml.clustering.KMeans\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.sql.{DataFrame, SQLContext}\nsqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@3b9d11f\ndataset: org.apache.spark.sql.DataFrame = [id: int, features: vector]\nkmeans: org.apache.spark.ml.clustering.KMeans = kmeans_3c53a2af2c72\nmodel: org.apache.spark.ml.clustering.KMeansModel = kmeans_3c53a2af2c72\nFinal Centers: \n[0.1,0.1,0.1]\n[3.1,3.1,3.1]\n"}},{"text":"%md\n\nDid you guess the cluster centers correctly?\n#\nAlthough this is a very simple exmaple, it should provide you with an intuitive feel for K-Means clustering.\n#\nBelow we've provided you with a visualization of training data points and computed cluster centers.\n#","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905736_2089105425","id":"20160531-234527_603082820","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Did you guess the cluster centers correctly?</p>\n<h1></h1>\n<p>Although this is a very simple exmaple, it should provide you with an intuitive feel for K-Means clustering.</p>\n<h1></h1>\n<p>Below we've provided you with a visualization of training data points and computed cluster centers.</p>\n<h1></h1>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2363","dateFinished":"2016-08-01T22:32:08+0000","dateStarted":"2016-08-01T22:32:08+0000"},{"title":"Visualized Result of K-Means Clustering","text":"%md\n\nThe input data is marked with a blue **+** and the two K-Means cluser centers are marked with a red **x**.\n#\n![scatter-plot](https://raw.githubusercontent.com/roberthryniewicz/images/master/lab201-plt-3d-scatter.png)","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905736_2089105425","id":"20160531-234527_2037625547","result":{"code":"SUCCESS","type":"HTML","msg":"<p>The input data is marked with a blue <strong>+</strong> and the two K-Means cluser centers are marked with a red <strong>x</strong>.</p>\n<h1></h1>\n<p><img src=\"https://raw.githubusercontent.com/roberthryniewicz/images/master/lab201-plt-3d-scatter.png\" alt=\"scatter-plot\" /></p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2364","dateFinished":"2016-08-01T22:32:08+0000","dateStarted":"2016-08-01T22:32:08+0000"},{"title":"Supervised Learning: Decision Trees and Random Forests","text":"%md\n\n### Supervised Learning\n\n\"Supervised learning is the machine learning task of inferring a function from labeled training data. The training data consist of a set of training examples. In supervised learning, each example is a pair consisting of an input object (typically a vector) and a desired output value (also called the supervisory signal). A supervised learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples. An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances. This requires the learning algorithm to generalize from the training data to unseen situations in a 'reasonable' way.\" - [wikipedia](https://en.wikipedia.org/wiki/Supervised_learning)","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905736_2089105425","id":"20160531-234527_450849720","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Supervised Learning</h3>\n<p>&ldquo;Supervised learning is the machine learning task of inferring a function from labeled training data. The training data consist of a set of training examples. In supervised learning, each example is a pair consisting of an input object (typically a vector) and a desired output value (also called the supervisory signal). A supervised learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples. An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances. This requires the learning algorithm to generalize from the training data to unseen situations in a 'reasonable' way.&rdquo; - <a href=\"https://en.wikipedia.org/wiki/Supervised_learning\">wikipedia</a></p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2365","dateFinished":"2016-08-01T22:32:08+0000","dateStarted":"2016-08-01T22:32:08+0000"},{"title":"Training Dataset","text":"%md\n\nFor Decision Tree and Random Forest examples we will use a diabetes dataset that has been cleansed, scaled, and sanitized to remove any personally identifying information. The diabetes dataset contains a distribution for 70 sets of data recorded on diabetes patients (several weeks' to months' worth of glucose, insulin, and lifestyle data per patient + a description of the problem domain).\n#\nKeep in mind that we are not particularly concerned what specific features represent, rather we will train our Decision Trees and Random Forest models to learn how the underlying features \"predict\" either negative or positive result based on the labeled training data set.\n#\n","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905736_2089105425","id":"20160531-234527_1108937424","result":{"code":"SUCCESS","type":"HTML","msg":"<p>For Decision Tree and Random Forest examples we will use a diabetes dataset that has been cleansed, scaled, and sanitized to remove any personally identifying information. The diabetes dataset contains a distribution for 70 sets of data recorded on diabetes patients (several weeks' to months' worth of glucose, insulin, and lifestyle data per patient + a description of the problem domain).</p>\n<h1></h1>\n<p>Keep in mind that we are not particularly concerned what specific features represent, rather we will train our Decision Trees and Random Forest models to learn how the underlying features &ldquo;predict&rdquo; either negative or positive result based on the labeled training data set.</p>\n<h1></h1>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2366","dateFinished":"2016-08-01T22:32:08+0000","dateStarted":"2016-08-01T22:32:08+0000"},{"title":"Download Dataset","text":"%sh\n\nwget --no-check-certificate http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/diabetes_scale -O /tmp/diabetes_scaled_data.txt","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sh","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905737_2088720677","id":"20160531-234527_2048196502","dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2367","dateFinished":"2016-08-01T22:32:09+0000","dateStarted":"2016-08-01T22:32:08+0000","result":{"code":"SUCCESS","type":"TEXT","msg":""}},{"title":"Preview Dataset","text":"%sh\n\nhead /tmp/diabetes_scaled_data.txt","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sh","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905737_2088720677","id":"20160531-234527_2023231351","dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2368","dateFinished":"2016-08-01T22:32:08+0000","dateStarted":"2016-08-01T22:32:08+0000","result":{"code":"SUCCESS","type":"TEXT","msg":""}},{"title":"Count Number of Lines in the Dataset","text":"%sh\n\nwc -l < /tmp/diabetes_scaled_data.txt","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sh","editorHide":false,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905737_2088720677","id":"20160531-234527_1193249659","dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2369","dateFinished":"2016-08-01T22:32:08+0000","dateStarted":"2016-08-01T22:32:08+0000","result":{"code":"SUCCESS","type":"TEXT","msg":"0\n"}},{"title":"Decision Trees","text":"%md\n\nDecision trees and their ensembles are popular methods for the machine learning tasks of classification and regression. Decision trees are widely used since they are easy to interpret, handle categorical features, extend to the multiclass classification setting, do not require feature scaling, and are able to capture non-linearities and feature interactions. Tree ensemble algorithms such as random forests and boosting are among the top performers for classification and regression tasks.\n#\nThe spark.ml implementation supports decision trees for binary and multiclass classification and for regression, using both continuous and categorical features. The implementation partitions data by rows, allowing distributed training with millions or even billions of instances. ([See docs](http://spark.apache.org/docs/latest/ml-classification-regression.html#decision-trees) for more info.)\n#\nMake sure to checkout **[this](http://www.r2d3.us/visual-intro-to-machine-learning-part-1/)** great introduction to Visual Machine Learning to get an intuitive feel for the *ideas* behind Decision Tree classification.","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905737_2088720677","id":"20160531-234527_1744723127","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Decision trees and their ensembles are popular methods for the machine learning tasks of classification and regression. Decision trees are widely used since they are easy to interpret, handle categorical features, extend to the multiclass classification setting, do not require feature scaling, and are able to capture non-linearities and feature interactions. Tree ensemble algorithms such as random forests and boosting are among the top performers for classification and regression tasks.</p>\n<h1></h1>\n<p>The spark.ml implementation supports decision trees for binary and multiclass classification and for regression, using both continuous and categorical features. The implementation partitions data by rows, allowing distributed training with millions or even billions of instances. (<a href=\"http://spark.apache.org/docs/latest/ml-classification-regression.html#decision-trees\">See docs</a> for more info.)</p>\n<h1></h1>\n<p>Make sure to checkout <strong><a href=\"http://www.r2d3.us/visual-intro-to-machine-learning-part-1/\">this</a></strong> great introduction to Visual Machine Learning to get an intuitive feel for the <em>ideas</em> behind Decision Tree classification.</p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2370","dateFinished":"2016-08-01T22:32:08+0000","dateStarted":"2016-08-01T22:32:08+0000"},{"text":"%md\n\nFirst, let's train a Decision Tree model using the original MLlib Decision Tree API.\n#\nWe will hold 30% of the data as a test dataset and will set a maximum tree depth to 5.\n","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905737_2088720677","id":"20160531-234527_1819879351","result":{"code":"SUCCESS","type":"HTML","msg":"<p>First, let's train a Decision Tree model using the original MLlib Decision Tree API.</p>\n<h1></h1>\n<p>We will hold 30% of the data as a test dataset and will set a maximum tree depth to 5.</p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2371","dateFinished":"2016-08-01T22:32:08+0000","dateStarted":"2016-08-01T22:32:08+0000"},{"title":"Decision Trees with Spark MLlib","text":"import org.apache.spark.mllib.tree.DecisionTree\nimport org.apache.spark.mllib.tree.model.DecisionTreeModel\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.util.MLUtils\n\n// Load and parse the data file.\nval data = MLUtils.loadLibSVMFile(sc, \"file:///tmp/diabetes_scaled_data.txt\")\n\n// re-map labels from {-1, 1} to {0, 1} space. (Otherwise an error will occur.)\nval data_remapped = data.map(d => new LabeledPoint(if (d.label == -1) 0 else 1, (d.features).toDense))\n\n// Split the data into training and test sets (30% held out for testing)\nval splits = data_remapped.randomSplit(Array(0.7, 0.3))\nval (trainingData, testData) = (splits(0), splits(1))\n\n// Train a DecisionTree model.\n//  Empty categoricalFeaturesInfo indicates all features are continuous.\nval numClasses = 2\nval categoricalFeaturesInfo = Map[Int, Int]()\nval impurity = \"gini\"\nval maxDepth = 5\nval maxBins = 32\n\nval model = DecisionTree.trainClassifier(trainingData, numClasses, categoricalFeaturesInfo,\n  impurity, maxDepth, maxBins)\n\n// Evaluate model on test instances and compute test error\nval labelAndPreds = testData.map { point =>\n  val prediction = model.predict(point.features)\n  (point.label, prediction)\n}\nval testErr = labelAndPreds.filter(r => r._1 != r._2).count().toDouble / testData.count()\nprintln(\"Test Error = \" + testErr)\nprintln(\"Learned classification tree model:\\n\" + model.toDebugString)","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905737_2088720677","id":"20160531-234527_102668036","dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2372","dateFinished":"2016-08-01T22:32:15+0000","dateStarted":"2016-08-01T22:32:08+0000","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.mllib.tree.DecisionTree\nimport org.apache.spark.mllib.tree.model.DecisionTreeModel\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.util.MLUtils\ndata: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[243] at map at MLUtils.scala:108\ndata_remapped: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[244] at map at <console>:40\nsplits: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint]] = Array(MapPartitionsRDD[245] at randomSplit at <console>:42, MapPartitionsRDD[246] at randomSplit at <console>:42)\ntrainingData: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[245] at randomSplit at <console>:42\ntestData: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[246] at randomSplit at <console>:42\nnumClasses: Int = 2\ncategoricalFeaturesInfo: scala.collection.immutable.Map[Int,Int] = Map()\nimpurity: String = gini\nmaxDepth: Int = 5\nmaxBins: Int = 32\nmodel: org.apache.spark.mllib.tree.model.DecisionTreeModel = DecisionTreeModel classifier of depth 5 with 57 nodes\nlabelAndPreds: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[270] at map at <console>:52\ntestErr: Double = 0.2675438596491228\nTest Error = 0.2675438596491228\nLearned classification tree model:\nDecisionTreeModel classifier of depth 5 with 57 nodes\n  If (feature 1 <= 0.145729)\n   If (feature 0 <= -0.294118)\n    If (feature 7 <= -0.366667)\n     If (feature 5 <= -0.0849478)\n      If (feature 6 <= -0.238258)\n       Predict: 1.0\n      Else (feature 6 > -0.238258)\n       Predict: 1.0\n     Else (feature 5 > -0.0849478)\n      If (feature 4 <= -0.739953)\n       Predict: 1.0\n      Else (feature 4 > -0.739953)\n       Predict: 1.0\n    Else (feature 7 > -0.366667)\n     If (feature 7 <= -0.333333)\n      Predict: 0.0\n     Else (feature 7 > -0.333333)\n      If (feature 1 <= -0.0653266)\n       Predict: 1.0\n      Else (feature 1 > -0.0653266)\n       Predict: 1.0\n   Else (feature 0 > -0.294118)\n    If (feature 1 <= -0.0452261)\n     If (feature 6 <= -0.379163)\n      If (feature 0 <= 0.294118)\n       Predict: 1.0\n      Else (feature 0 > 0.294118)\n       Predict: 1.0\n     Else (feature 6 > -0.379163)\n      Predict: 0.0\n    Else (feature 1 > -0.0452261)\n     If (feature 7 <= -0.0333333)\n      If (feature 6 <= -0.633646)\n       Predict: 0.0\n      Else (feature 6 > -0.633646)\n       Predict: 0.0\n     Else (feature 7 > -0.0333333)\n      Predict: 1.0\n  Else (feature 1 > 0.145729)\n   If (feature 1 <= 0.547739)\n    If (feature 5 <= -0.183308)\n     If (feature 2 <= -0.114754)\n      If (feature 6 <= -0.870196)\n       Predict: 1.0\n      Else (feature 6 > -0.870196)\n       Predict: 0.0\n     Else (feature 2 > -0.114754)\n      If (feature 3 <= -0.434343)\n       Predict: 1.0\n      Else (feature 3 > -0.434343)\n       Predict: 0.0\n    Else (feature 5 > -0.183308)\n     If (feature 7 <= -0.766667)\n      If (feature 3 <= -1.0)\n       Predict: 0.0\n      Else (feature 3 > -1.0)\n       Predict: 1.0\n     Else (feature 7 > -0.766667)\n      If (feature 6 <= -0.657558)\n       Predict: 0.0\n      Else (feature 6 > -0.657558)\n       Predict: 0.0\n   Else (feature 1 > 0.547739)\n    If (feature 6 <= -0.774552)\n     If (feature 5 <= 0.0551417)\n      If (feature 6 <= -0.927412)\n       Predict: 0.0\n      Else (feature 6 > -0.927412)\n       Predict: 1.0\n     Else (feature 5 > 0.0551417)\n      If (feature 1 <= 0.688442)\n       Predict: 0.0\n      Else (feature 1 > 0.688442)\n       Predict: 0.0\n    Else (feature 6 > -0.774552)\n     If (feature 4 <= -0.219858)\n      If (feature 5 <= -0.147541)\n       Predict: 0.0\n      Else (feature 5 > -0.147541)\n       Predict: 0.0\n     Else (feature 4 > -0.219858)\n      If (feature 1 <= 0.688442)\n       Predict: 1.0\n      Else (feature 1 > 0.688442)\n       Predict: 0.0\n\n"}},{"text":"%md\n\nMake sure to carefully evaluate the output. What is the accuracy after training this model?","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905737_2088720677","id":"20160531-234527_1112312511","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Make sure to carefully evaluate the output. What is the accuracy after training this model?</p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2373","dateFinished":"2016-08-01T22:32:09+0000","dateStarted":"2016-08-01T22:32:09+0000"},{"text":"%md\n\nNow let's use the higher level Spark ML API for comparison.\n#\nThe main differences between this API and the original MLlib Decision Tree API are:\n\n- support for ML Pipelines\n- separation of Decision Trees for classification vs. regression\n- use of DataFrame metadata to distinguish continuous and categorical features\n\nThe Pipelines API for Decision Trees offers a bit more functionality than the original API. In particular, for classification, users can get the predicted probability of each class (a.k.a. class conditional probabilities).\n","dateUpdated":"2016-08-01T22:32:08+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905737_2088720677","id":"20160531-234527_791225242","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Now let's use the higher level Spark ML API for comparison.</p>\n<h1></h1>\n<p>The main differences between this API and the original MLlib Decision Tree API are:</p>\n<ul>\n<li>support for ML Pipelines</li>\n<li>separation of Decision Trees for classification vs. regression</li>\n<li>use of DataFrame metadata to distinguish continuous and categorical features</li>\n</ul>\n<p>The Pipelines API for Decision Trees offers a bit more functionality than the original API. In particular, for classification, users can get the predicted probability of each class (a.k.a. class conditional probabilities).</p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2374","dateFinished":"2016-08-01T22:32:09+0000","dateStarted":"2016-08-01T22:32:09+0000"},{"title":"Decision Trees with Spark ML","text":"import org.apache.spark.sql.SQLContext                                                                                       \n\nimport org.apache.spark.ml.Pipeline                                                                                          \nimport org.apache.spark.ml.classification.DecisionTreeClassifier                                                             \nimport org.apache.spark.ml.classification.DecisionTreeClassificationModel                                                    \nimport org.apache.spark.ml.feature.{StringIndexer, IndexToString, VectorIndexer}                                             \nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator \nimport org.apache.spark.sql.Row\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\n\nval sqlContext = new SQLContext(sc)                                                                                              \n    \n// Load the data stored in LIBSVM format as a DataFrame.                                                                 \nval data = sqlContext.read.format(\"libsvm\").load(\"file:///tmp/diabetes_scaled_data.txt\")                                    \n                                                                                            \n// Index labels, adding metadata to the label column.                                                                    \n// Fit on whole dataset to include all labels in index.                                                                  \nval labelIndexer = new StringIndexer()                                                                                   \n      .setInputCol(\"label\")                                                                                                  \n      .setOutputCol(\"indexedLabel\")                                                                                          \n      .fit(data)\n    \n// Automatically identify categorical features, and index them.                                                          \nval featureIndexer = new VectorIndexer()                                                                                 \n      .setInputCol(\"features\")                                                                                               \n      .setOutputCol(\"indexedFeatures\")                                                                                       \n      .setMaxCategories(2) // features with > 4 distinct values are treated as continuous                                    \n      .fit(data)                                                                                                             \n                                                                                                                             \n// Split the data into training and test sets (30% held out for testing)                                                 \nval Array(trainingData, testData) = data.randomSplit(Array(0.7, 0.3))                                                    \n                                                                                                                             \n// Train a DecisionTree model.                                                                                           \nval dt = new DecisionTreeClassifier()                                                                                    \n      .setLabelCol(\"indexedLabel\")                                                                                           \n      .setFeaturesCol(\"indexedFeatures\")\n      .setMaxDepth(5)\n                                                                                                                             \n// Convert indexed labels back to original labels.                                                                       \nval labelConverter = new IndexToString()                                                                                 \n      .setInputCol(\"prediction\")                                                                                             \n      .setOutputCol(\"predictedLabel\")                                                                                        \n      .setLabels(labelIndexer.labels)                                                                                        \n                                                                                                                             \n// Chain indexers and tree in a Pipeline                                                                                 \nval pipeline = new Pipeline()                                                                                            \n      .setStages(Array(labelIndexer, featureIndexer, dt, labelConverter))                                                    \n                                                                                                                             \n// Train model.  This also runs the indexers.                                                                            \nval model = pipeline.fit(trainingData)                                                                                   \n                                                                                                                             \n// Make predictions.                                                                                                     \nval predictions = model.transform(testData)                                                                              \n                                                                                                                             \n// Select example rows to display.                                                                                       \npredictions.select(\"predictedLabel\", \"label\", \"features\").show(5)                                                        \n                                                                                                                             \n// Select (prediction, true label) and compute test error                                                                \nval evaluator = new MulticlassClassificationEvaluator()                                                                  \n      .setLabelCol(\"indexedLabel\")                                                                                           \n      .setPredictionCol(\"prediction\")                                                                                        \n      .setMetricName(\"precision\")                                                                                            \n    \nval accuracy = evaluator.evaluate(predictions)                                                                           \nprintln(\"Test Error = \" + (1.0 - accuracy))                                                                              \n                                                                                                                             \nval treeModel = model.stages(2).asInstanceOf[DecisionTreeClassificationModel]                                            \nprintln(\"Learned classification tree model:\\n\" + treeModel.toDebugString)","dateUpdated":"2016-08-01T22:32:09+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905737_2088720677","id":"20160531-234527_903900070","dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2375","dateFinished":"2016-08-01T22:32:24+0000","dateStarted":"2016-08-01T22:32:11+0000","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.sql.SQLContext\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.classification.DecisionTreeClassifier\nimport org.apache.spark.ml.classification.DecisionTreeClassificationModel\nimport org.apache.spark.ml.feature.{StringIndexer, IndexToString, VectorIndexer}\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nimport org.apache.spark.sql.Row\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\nsqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@22115fa3\ndata: org.apache.spark.sql.DataFrame = [label: double, features: vector]\nlabelIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_cc4cf3e090f7\nfeatureIndexer: org.apache.spark.ml.feature.VectorIndexerModel = vecIdx_2fe6205b5299\ntrainingData: org.apache.spark.sql.DataFrame = [label: double, features: vector]\ntestData: org.apache.spark.sql.DataFrame = [label: double, features: vector]\ndt: org.apache.spark.ml.classification.DecisionTreeClassifier = dtc_be6eefeabbb7\nlabelConverter: org.apache.spark.ml.feature.IndexToString = idxToStr_5374d244a135\npipeline: org.apache.spark.ml.Pipeline = pipeline_05da3e2b9767\nmodel: org.apache.spark.ml.PipelineModel = pipeline_05da3e2b9767\npredictions: org.apache.spark.sql.DataFrame = [label: double, features: vector, indexedLabel: double, indexedFeatures: vector, rawPrediction: vector, probability: vector, prediction: double, predictedLabel: string]\n+--------------+-----+--------------------+\n|predictedLabel|label|            features|\n+--------------+-----+--------------------+\n|           1.0| -1.0|(8,[0,1,2,3,4,5,6...|\n|          -1.0| -1.0|(8,[0,1,2,3,4,5,6...|\n|          -1.0| -1.0|(8,[0,1,2,3,4,5,6...|\n|          -1.0| -1.0|(8,[0,1,2,3,4,5,6...|\n|           1.0| -1.0|(8,[0,1,2,3,4,5,6...|\n+--------------+-----+--------------------+\nonly showing top 5 rows\n\nevaluator: org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator = mcEval_4aa04c2c3229\naccuracy: Double = 0.6972477064220184\nTest Error = 0.3027522935779816\ntreeModel: org.apache.spark.ml.classification.DecisionTreeClassificationModel = DecisionTreeClassificationModel (uid=dtc_be6eefeabbb7) of depth 5 with 55 nodes\nLearned classification tree model:\nDecisionTreeClassificationModel (uid=dtc_be6eefeabbb7) of depth 5 with 55 nodes\n  If (feature 1 <= 0.21608)\n   If (feature 0 <= -0.294118)\n    If (feature 5 <= -0.0909091)\n     If (feature 7 <= -0.4)\n      If (feature 1 <= 0.0552764)\n       Predict: 0.0\n      Else (feature 1 > 0.0552764)\n       Predict: 0.0\n     Else (feature 7 > -0.4)\n      If (feature 5 <= -0.257824)\n       Predict: 0.0\n      Else (feature 5 > -0.257824)\n       Predict: 1.0\n    Else (feature 5 > -0.0909091)\n     If (feature 1 <= 0.0854271)\n      If (feature 6 <= -0.0512383)\n       Predict: 0.0\n      Else (feature 6 > -0.0512383)\n       Predict: 1.0\n     Else (feature 1 > 0.0854271)\n      If (feature 5 <= 0.0670641)\n       Predict: 0.0\n      Else (feature 5 > 0.0670641)\n       Predict: 0.0\n   Else (feature 0 > -0.294118)\n    If (feature 5 <= -0.19225)\n     If (feature 5 <= -0.415797)\n      If (feature 0 <= -0.176471)\n       Predict: 0.0\n      Else (feature 0 > -0.176471)\n       Predict: 1.0\n     Else (feature 5 > -0.415797)\n      Predict: 0.0\n    Else (feature 5 > -0.19225)\n     If (feature 1 <= -0.0351759)\n      If (feature 0 <= 0.0588235)\n       Predict: 0.0\n      Else (feature 0 > 0.0588235)\n       Predict: 1.0\n     Else (feature 1 > -0.0351759)\n      If (feature 6 <= -0.864219)\n       Predict: 0.0\n      Else (feature 6 > -0.864219)\n       Predict: 1.0\n  Else (feature 1 > 0.21608)\n   If (feature 5 <= -0.114754)\n    If (feature 1 <= 0.547739)\n     If (feature 1 <= 0.366834)\n      If (feature 5 <= -0.19225)\n       Predict: 0.0\n      Else (feature 5 > -0.19225)\n       Predict: 0.0\n     Else (feature 1 > 0.366834)\n      Predict: 0.0\n    Else (feature 1 > 0.547739)\n     If (feature 7 <= -0.9)\n      Predict: 0.0\n     Else (feature 7 > -0.9)\n      If (feature 5 <= -0.23994)\n       Predict: 1.0\n      Else (feature 5 > -0.23994)\n       Predict: 0.0\n   Else (feature 5 > -0.114754)\n    If (feature 1 <= 0.296482)\n     If (feature 7 <= -0.833333)\n      If (feature 3 <= -0.131313)\n       Predict: 0.0\n      Else (feature 3 > -0.131313)\n       Predict: 1.0\n     Else (feature 7 > -0.833333)\n      If (feature 6 <= -0.824082)\n       Predict: 0.0\n      Else (feature 6 > -0.824082)\n       Predict: 1.0\n    Else (feature 1 > 0.296482)\n     If (feature 2 <= -0.0163934)\n      Predict: 1.0\n     Else (feature 2 > -0.0163934)\n      If (feature 0 <= -0.294118)\n       Predict: 1.0\n      Else (feature 0 > -0.294118)\n       Predict: 1.0\n\n"}},{"text":"%md\n\nWhat's the accuracy when using Spark ML API? What happens if you re-run the algo? Is the accuracy still the same? \n#\nCan you guess why you get different results?\n#","dateUpdated":"2016-08-01T22:32:09+0000","config":{"enabled":true,"title":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905738_2089874923","id":"20160531-234527_549157612","result":{"code":"SUCCESS","type":"HTML","msg":"<p>What's the accuracy when using Spark ML API? What happens if you re-run the algo? Is the accuracy still the same?</p>\n<h1></h1>\n<p>Can you guess why you get different results?</p>\n<h1></h1>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2376","dateFinished":"2016-08-01T22:32:09+0000","dateStarted":"2016-08-01T22:32:09+0000"},{"title":"Random Forests","text":"%md\n\nNow let's see if we can achieve a better performance with an ensemble of trees known as random forests. \n#\nRandom forests combine many decision trees in order to reduce the risk of overfitting. The spark.ml implementation supports random forests for binary and multiclass classification and for regression, using both continuous and categorical features. ([See docs](http://spark.apache.org/docs/latest/ml-classification-regression.html#random-forests) for more info.)\n#\nIn the example below we will combine five (5) trees to create a forest of trees.\n#\n","dateUpdated":"2016-08-01T22:32:09+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905738_2089874923","id":"20160531-234527_1954753725","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Now let's see if we can achieve a better performance with an ensemble of trees known as random forests.</p>\n<h1></h1>\n<p>Random forests combine many decision trees in order to reduce the risk of overfitting. The spark.ml implementation supports random forests for binary and multiclass classification and for regression, using both continuous and categorical features. (<a href=\"http://spark.apache.org/docs/latest/ml-classification-regression.html#random-forests\">See docs</a> for more info.)</p>\n<h1></h1>\n<p>In the example below we will combine five (5) trees to create a forest of trees.</p>\n<h1></h1>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2377","dateFinished":"2016-08-01T22:32:09+0000","dateStarted":"2016-08-01T22:32:09+0000"},{"title":"Random Forest with Spark ML","text":"import org.apache.spark.sql.SQLContext                                                                                                  \n\nimport org.apache.spark.ml.Pipeline                                                                                                     \nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}                                     \nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator                                                                 \nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}                                                        \n\nval sqlContext = new SQLContext(sc)                                                                                                 \n                                                                                                                                        \n// Load and parse the LIBSVM data file, converting it to a DataFrame.\nval data = sqlContext.read.format(\"libsvm\").load(\"file:///tmp/diabetes_scaled_data.txt\") \n                                                                                                                                        \n// Index labels, adding metadata to the label column.                                                                               \n// Fit on whole dataset to include all labels in index.                                                                             \nval labelIndexer = new StringIndexer()                                                                                              \n      .setInputCol(\"label\")                                                                                                             \n      .setOutputCol(\"indexedLabel\")                                                                                                     \n      .fit(data)                                                                                                                        \n\n// Automatically identify categorical features, and index them.                                                                     \nval featureIndexer = new VectorIndexer()                                                                                            \n      .setInputCol(\"features\")                                                                                                          \n      .setOutputCol(\"indexedFeatures\")                                                                                                  \n      .setMaxCategories(2)                                                                                                              \n      .fit(data)                                                                                                                        \n                                                                                                                                        \n// Split the data into training and test sets (30% held out for testing)                                                            \nval Array(trainingData, testData) = data.randomSplit(Array(0.7, 0.3))                                                               \n                                                                                                                                        \n// Train a RandomForest model.                                                                                                      \nval rf = new RandomForestClassifier()                                                                                               \n      .setLabelCol(\"indexedLabel\")                                                                                                      \n      .setFeaturesCol(\"indexedFeatures\")                                                                                                \n      .setNumTrees(5)                                                                                                                  \n                                                                                                                                        \n// Convert indexed labels back to original labels.                                                                                  \nval labelConverter = new IndexToString()                                                                                            \n      .setInputCol(\"prediction\")                                                                                                        \n      .setOutputCol(\"predictedLabel\")                                                                                                   \n      .setLabels(labelIndexer.labels)                                                                                                   \n                                                                                                                                        \n// Chain indexers and forest in a Pipeline                                                                                          \nval pipeline = new Pipeline()                                                                                                       \n      .setStages(Array(labelIndexer, featureIndexer, rf, labelConverter))                                                               \n                                                                                                                                        \n// Train model.  This also runs the indexers.                                                                                       \nval model = pipeline.fit(trainingData)                                                                                              \n                                                                                                                                        \n// Make predictions.                                                                                                                \nval predictions = model.transform(testData)                                                                                         \n                                                                                                                                        \n// Select example rows to display.                                                                                                  \npredictions.select(\"predictedLabel\", \"label\", \"features\").show(5)                                                                   \n                                                                                                                                        \n// Select (prediction, true label) and compute test error                                                                           \nval evaluator = new MulticlassClassificationEvaluator()                                                                             \n      .setLabelCol(\"indexedLabel\")                                                                                                      \n      .setPredictionCol(\"prediction\")                                                                                                   \n      .setMetricName(\"precision\")                                                                                                       \n    \nval accuracy = evaluator.evaluate(predictions)                                                                                      \nprintln(\"Test Error = \" + (1.0 - accuracy))                                                                                         \n                                                                                                                                        \nval rfModel = model.stages(2).asInstanceOf[RandomForestClassificationModel]                                                         \nprintln(\"Learned classification forest model:\\n\" + rfModel.toDebugString)  ","dateUpdated":"2016-08-01T22:32:09+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905738_2089874923","id":"20160531-234527_1341024269","dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2378","dateFinished":"2016-08-01T22:32:28+0000","dateStarted":"2016-08-01T22:32:16+0000","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.sql.SQLContext\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}\nsqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@257596db\ndata: org.apache.spark.sql.DataFrame = [label: double, features: vector]\nlabelIndexer: org.apache.spark.ml.feature.StringIndexerModel = strIdx_eb45327f72bf\nfeatureIndexer: org.apache.spark.ml.feature.VectorIndexerModel = vecIdx_bf6b2a04e13c\ntrainingData: org.apache.spark.sql.DataFrame = [label: double, features: vector]\ntestData: org.apache.spark.sql.DataFrame = [label: double, features: vector]\nrf: org.apache.spark.ml.classification.RandomForestClassifier = rfc_9c78f9be861d\nlabelConverter: org.apache.spark.ml.feature.IndexToString = idxToStr_249356c57841\npipeline: org.apache.spark.ml.Pipeline = pipeline_bf4669356b67\nmodel: org.apache.spark.ml.PipelineModel = pipeline_bf4669356b67\npredictions: org.apache.spark.sql.DataFrame = [label: double, features: vector, indexedLabel: double, indexedFeatures: vector, rawPrediction: vector, probability: vector, prediction: double, predictedLabel: string]\n+--------------+-----+--------------------+\n|predictedLabel|label|            features|\n+--------------+-----+--------------------+\n|          -1.0| -1.0|(8,[0,1,2,3,4,5,6...|\n|          -1.0| -1.0|(8,[0,1,2,3,4,5,6...|\n|           1.0| -1.0|(8,[0,1,2,3,4,5,6...|\n|          -1.0| -1.0|(8,[0,1,2,3,4,5,6...|\n|          -1.0| -1.0|(8,[0,1,2,3,4,5,6...|\n+--------------+-----+--------------------+\nonly showing top 5 rows\n\nevaluator: org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator = mcEval_54fa6a829db3\naccuracy: Double = 0.7172995780590717\nTest Error = 0.28270042194092826\nrfModel: org.apache.spark.ml.classification.RandomForestClassificationModel = RandomForestClassificationModel (uid=rfc_5fbf31bad14e) with 5 trees\nLearned classification forest model:\nRandomForestClassificationModel (uid=rfc_5fbf31bad14e) with 5 trees\n  Tree 0 (weight 1.0):\n    If (feature 5 <= -0.153502)\n     If (feature 7 <= -0.8)\n      If (feature 5 <= -0.222057)\n       Predict: 0.0\n      Else (feature 5 > -0.222057)\n       If (feature 6 <= -0.838599)\n        If (feature 3 <= -1.0)\n         Predict: 1.0\n        Else (feature 3 > -1.0)\n         Predict: 0.0\n       Else (feature 6 > -0.838599)\n        If (feature 3 <= -0.656566)\n         Predict: 0.0\n        Else (feature 3 > -0.656566)\n         Predict: 0.0\n     Else (feature 7 > -0.8)\n      If (feature 1 <= 0.417085)\n       If (feature 2 <= 0.508197)\n        If (feature 5 <= -0.222057)\n         Predict: 0.0\n        Else (feature 5 > -0.222057)\n         Predict: 0.0\n       Else (feature 2 > 0.508197)\n        Predict: 1.0\n      Else (feature 1 > 0.417085)\n       If (feature 2 <= 0.213115)\n        If (feature 1 <= 0.61809)\n         Predict: 1.0\n        Else (feature 1 > 0.61809)\n         Predict: 1.0\n       Else (feature 2 > 0.213115)\n        Predict: 0.0\n    Else (feature 5 > -0.153502)\n     If (feature 6 <= -0.63877)\n      If (feature 5 <= 0.245902)\n       If (feature 1 <= 0.557789)\n        If (feature 2 <= 0.278689)\n         Predict: 0.0\n        Else (feature 2 > 0.278689)\n         Predict: 0.0\n       Else (feature 1 > 0.557789)\n        If (feature 3 <= -0.393939)\n         Predict: 1.0\n        Else (feature 3 > -0.393939)\n         Predict: 0.0\n      Else (feature 5 > 0.245902)\n       If (feature 1 <= -0.0251256)\n        Predict: 0.0\n       Else (feature 1 > -0.0251256)\n        If (feature 2 <= 0.393443)\n         Predict: 1.0\n        Else (feature 2 > 0.393443)\n         Predict: 1.0\n     Else (feature 6 > -0.63877)\n      If (feature 6 <= -0.251067)\n       If (feature 5 <= -0.0700447)\n        If (feature 0 <= -0.176471)\n         Predict: 0.0\n        Else (feature 0 > -0.176471)\n         Predict: 1.0\n       Else (feature 5 > -0.0700447)\n        If (feature 0 <= -0.0588235)\n         Predict: 1.0\n        Else (feature 0 > -0.0588235)\n         Predict: 1.0\n      Else (feature 6 > -0.251067)\n       If (feature 5 <= 0.290611)\n        If (feature 1 <= 0.226131)\n         Predict: 0.0\n        Else (feature 1 > 0.226131)\n         Predict: 1.0\n       Else (feature 5 > 0.290611)\n        Predict: 0.0\n  Tree 1 (weight 1.0):\n    If (feature 1 <= 0.376884)\n     If (feature 0 <= -0.176471)\n      If (feature 1 <= 0.105528)\n       If (feature 5 <= -0.0223547)\n        If (feature 7 <= -0.1)\n         Predict: 0.0\n        Else (feature 7 > -0.1)\n         Predict: 1.0\n       Else (feature 5 > -0.0223547)\n        If (feature 7 <= -0.966667)\n         Predict: 0.0\n        Else (feature 7 > -0.966667)\n         Predict: 0.0\n      Else (feature 1 > 0.105528)\n       If (feature 5 <= -0.19225)\n        Predict: 0.0\n       Else (feature 5 > -0.19225)\n        If (feature 5 <= 0.18927)\n         Predict: 0.0\n        Else (feature 5 > 0.18927)\n         Predict: 1.0\n     Else (feature 0 > -0.176471)\n      If (feature 6 <= -0.903501)\n       Predict: 0.0\n      Else (feature 6 > -0.903501)\n       If (feature 6 <= -0.838599)\n        If (feature 1 <= -0.0854271)\n         Predict: 0.0\n        Else (feature 1 > -0.0854271)\n         Predict: 1.0\n       Else (feature 6 > -0.838599)\n        If (feature 5 <= -0.0968703)\n         Predict: 0.0\n        Else (feature 5 > -0.0968703)\n         Predict: 1.0\n    Else (feature 1 > 0.376884)\n     If (feature 5 <= -0.111773)\n      If (feature 5 <= -0.242921)\n       If (feature 2 <= 0.213115)\n        Predict: 1.0\n       Else (feature 2 > 0.213115)\n        Predict: 0.0\n      Else (feature 5 > -0.242921)\n       If (feature 1 <= 0.61809)\n        If (feature 3 <= -0.656566)\n         Predict: 0.0\n        Else (feature 3 > -0.656566)\n         Predict: 0.0\n       Else (feature 1 > 0.61809)\n        If (feature 5 <= -0.222057)\n         Predict: 1.0\n        Else (feature 5 > -0.222057)\n         Predict: 0.0\n     Else (feature 5 > -0.111773)\n      If (feature 2 <= 0.0491803)\n       Predict: 1.0\n      Else (feature 2 > 0.0491803)\n       If (feature 1 <= 0.487437)\n        If (feature 3 <= -1.0)\n         Predict: 0.0\n        Else (feature 3 > -1.0)\n         Predict: 1.0\n       Else (feature 1 > 0.487437)\n        If (feature 2 <= 0.147541)\n         Predict: 1.0\n        Else (feature 2 > 0.147541)\n         Predict: 1.0\n  Tree 2 (weight 1.0):\n    If (feature 7 <= -0.8)\n     If (feature 5 <= -0.0819672)\n      If (feature 4 <= -0.78487)\n       If (feature 6 <= -0.734415)\n        Predict: 0.0\n       Else (feature 6 > -0.734415)\n        If (feature 0 <= -0.764706)\n         Predict: 0.0\n        Else (feature 0 > -0.764706)\n         Predict: 0.0\n      Else (feature 4 > -0.78487)\n       If (feature 1 <= 0.487437)\n        If (feature 6 <= -0.251067)\n         Predict: 0.0\n        Else (feature 6 > -0.251067)\n         Predict: 0.0\n       Else (feature 1 > 0.487437)\n        Predict: 1.0\n     Else (feature 5 > -0.0819672)\n      If (feature 6 <= -0.251067)\n       If (feature 0 <= -0.529412)\n        If (feature 4 <= -0.914894)\n         Predict: 0.0\n        Else (feature 4 > -0.914894)\n         Predict: 0.0\n       Else (feature 0 > -0.529412)\n        If (feature 6 <= -0.754056)\n         Predict: 1.0\n        Else (feature 6 > -0.754056)\n         Predict: 0.0\n      Else (feature 6 > -0.251067)\n       Predict: 1.0\n    Else (feature 7 > -0.8)\n     If (feature 4 <= -0.730496)\n      If (feature 3 <= -1.0)\n       If (feature 7 <= 0.133333)\n        If (feature 7 <= -0.7)\n         Predict: 0.0\n        Else (feature 7 > -0.7)\n         Predict: 1.0\n       Else (feature 7 > 0.133333)\n        If (feature 5 <= -0.111773)\n         Predict: 0.0\n        Else (feature 5 > -0.111773)\n         Predict: 0.0\n      Else (feature 3 > -1.0)\n       If (feature 2 <= 0.508197)\n        If (feature 4 <= -1.0)\n         Predict: 0.0\n        Else (feature 4 > -1.0)\n         Predict: 0.0\n       Else (feature 2 > 0.508197)\n        If (feature 1 <= -0.0552764)\n         Predict: 0.0\n        Else (feature 1 > -0.0552764)\n         Predict: 1.0\n     Else (feature 4 > -0.730496)\n      If (feature 5 <= -0.177347)\n       If (feature 6 <= -0.664389)\n        Predict: 1.0\n       Else (feature 6 > -0.664389)\n        If (feature 1 <= 0.376884)\n         Predict: 0.0\n        Else (feature 1 > 0.376884)\n         Predict: 1.0\n      Else (feature 5 > -0.177347)\n       If (feature 7 <= -0.3)\n        If (feature 6 <= -0.846285)\n         Predict: 0.0\n        Else (feature 6 > -0.846285)\n         Predict: 1.0\n       Else (feature 7 > -0.3)\n        Predict: 1.0\n  Tree 3 (weight 1.0):\n    If (feature 5 <= -0.111773)\n     If (feature 1 <= 0.105528)\n      Predict: 0.0\n     Else (feature 1 > 0.105528)\n      If (feature 0 <= -0.294118)\n       If (feature 4 <= -0.730496)\n        If (feature 6 <= -0.914603)\n         Predict: 0.0\n        Else (feature 6 > -0.914603)\n         Predict: 0.0\n       Else (feature 4 > -0.730496)\n        If (feature 1 <= 0.557789)\n         Predict: 0.0\n        Else (feature 1 > 0.557789)\n         Predict: 1.0\n      Else (feature 0 > -0.294118)\n       If (feature 5 <= -0.19225)\n        If (feature 4 <= -0.806147)\n         Predict: 0.0\n        Else (feature 4 > -0.806147)\n         Predict: 1.0\n       Else (feature 5 > -0.19225)\n        If (feature 5 <= -0.177347)\n         Predict: 1.0\n        Else (feature 5 > -0.177347)\n         Predict: 1.0\n    Else (feature 5 > -0.111773)\n     If (feature 1 <= 0.246231)\n      If (feature 7 <= -0.766667)\n       If (feature 5 <= 0.362146)\n        If (feature 4 <= -0.78487)\n         Predict: 0.0\n        Else (feature 4 > -0.78487)\n         Predict: 0.0\n       Else (feature 5 > 0.362146)\n        Predict: 1.0\n      Else (feature 7 > -0.766667)\n       If (feature 1 <= -0.00502513)\n        If (feature 7 <= 0.0)\n         Predict: 0.0\n        Else (feature 7 > 0.0)\n         Predict: 1.0\n       Else (feature 1 > -0.00502513)\n        If (feature 0 <= -0.0588235)\n         Predict: 1.0\n        Else (feature 0 > -0.0588235)\n         Predict: 0.0\n     Else (feature 1 > 0.246231)\n      If (feature 6 <= -0.795047)\n       If (feature 0 <= -0.882353)\n        If (feature 6 <= -0.824936)\n         Predict: 1.0\n        Else (feature 6 > -0.824936)\n         Predict: 0.0\n       Else (feature 0 > -0.882353)\n        If (feature 7 <= -0.266667)\n         Predict: 1.0\n        Else (feature 7 > -0.266667)\n         Predict: 0.0\n      Else (feature 6 > -0.795047)\n       If (feature 2 <= -0.0163934)\n        Predict: 1.0\n       Else (feature 2 > -0.0163934)\n        If (feature 6 <= -0.549957)\n         Predict: 1.0\n        Else (feature 6 > -0.549957)\n         Predict: 1.0\n  Tree 4 (weight 1.0):\n    If (feature 7 <= -0.733333)\n     If (feature 6 <= -0.251067)\n      If (feature 5 <= 0.245902)\n       If (feature 1 <= 0.376884)\n        If (feature 3 <= -0.434343)\n         Predict: 0.0\n        Else (feature 3 > -0.434343)\n         Predict: 0.0\n       Else (feature 1 > 0.376884)\n        If (feature 2 <= -1.0)\n         Predict: 1.0\n        Else (feature 2 > -1.0)\n         Predict: 0.0\n      Else (feature 5 > 0.245902)\n       If (feature 1 <= -0.0251256)\n        If (feature 2 <= -0.245902)\n         Predict: 1.0\n        Else (feature 2 > -0.245902)\n         Predict: 0.0\n       Else (feature 1 > -0.0251256)\n        If (feature 6 <= -0.959009)\n         Predict: 0.0\n        Else (feature 6 > -0.959009)\n         Predict: 1.0\n     Else (feature 6 > -0.251067)\n      If (feature 4 <= -0.858156)\n       If (feature 7 <= -0.966667)\n        Predict: 1.0\n       Else (feature 7 > -0.966667)\n        Predict: 0.0\n      Else (feature 4 > -0.858156)\n       Predict: 1.0\n    Else (feature 7 > -0.733333)\n     If (feature 7 <= 0.133333)\n      If (feature 1 <= 0.105528)\n       If (feature 2 <= -1.0)\n        Predict: 1.0\n       Else (feature 2 > -1.0)\n        If (feature 5 <= -0.222057)\n         Predict: 0.0\n        Else (feature 5 > -0.222057)\n         Predict: 0.0\n      Else (feature 1 > 0.105528)\n       If (feature 4 <= -0.730496)\n        If (feature 2 <= 0.0163934)\n         Predict: 1.0\n        Else (feature 2 > 0.0163934)\n         Predict: 1.0\n       Else (feature 4 > -0.730496)\n        If (feature 0 <= -0.294118)\n         Predict: 1.0\n        Else (feature 0 > -0.294118)\n         Predict: 1.0\n     Else (feature 7 > 0.133333)\n      If (feature 3 <= -0.353535)\n       If (feature 1 <= 0.447236)\n        Predict: 0.0\n       Else (feature 1 > 0.447236)\n        If (feature 5 <= -0.111773)\n         Predict: 0.0\n        Else (feature 5 > -0.111773)\n         Predict: 1.0\n      Else (feature 3 > -0.353535)\n       If (feature 5 <= -0.00745157)\n        If (feature 0 <= -0.0588235)\n         Predict: 1.0\n        Else (feature 0 > -0.0588235)\n         Predict: 0.0\n       Else (feature 5 > -0.00745157)\n        Predict: 1.0\n\n"}},{"text":"%md\n#\nHas the accuracy improved after training the dataset using the Random Forest model? Does the accuracy improve if you increase the number of trees?\n#\nWhat did you find interesting in the output of a Random Forest classifier?\n#","dateUpdated":"2016-08-01T22:32:09+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905738_2089874923","id":"20160531-234527_754013818","result":{"code":"SUCCESS","type":"HTML","msg":"<h1></h1>\n<p>Has the accuracy improved after training the dataset using the Random Forest model? Does the accuracy improve if you increase the number of trees?</p>\n<h1></h1>\n<p>What did you find interesting in the output of a Random Forest classifier?</p>\n<h1></h1>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2379","dateFinished":"2016-08-01T22:32:09+0000","dateStarted":"2016-08-01T22:32:09+0000"},{"title":"The End","text":"%md\n\nThis concludes our lab. Hopefully you've got a taste of how easy it is to run clustering and classification models with Apache Spark!","dateUpdated":"2016-08-01T22:32:09+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905738_2089874923","id":"20160531-234527_409238179","result":{"code":"SUCCESS","type":"HTML","msg":"<p>This concludes our lab. Hopefully you've got a taste of how easy it is to run clustering and classification models with Apache Spark!</p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2380","dateFinished":"2016-08-01T22:32:09+0000","dateStarted":"2016-08-01T22:32:09+0000"},{"title":"Resources: Hortonworks Community Connection","text":"%md\n\nMake sure to checkout [Hortonworks Community Connection (HCC)](https://community.hortonworks.com/answers/index.html) if you have Apache Spark and/or Data Science / Analytics related questions or you would like to contribute back to the community with your own answers/examples/articles/repos.\n#\nAll best,\nThe HCC Team!\n#\n[![HCC](http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png)](https://community.hortonworks.com/answers/index.html)","dateUpdated":"2016-08-01T22:32:09+0000","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905738_2089874923","id":"20160531-234527_1823436759","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Make sure to checkout <a href=\"https://community.hortonworks.com/answers/index.html\">Hortonworks Community Connection (HCC)</a> if you have Apache Spark and/or Data Science / Analytics related questions or you would like to contribute back to the community with your own answers/examples/articles/repos.</p>\n<h1></h1>\n<p>All best,\n<br  />The HCC Team!</p>\n<h1></h1>\n<p><a href=\"https://community.hortonworks.com/answers/index.html\"><img src=\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt=\"HCC\" /></a></p>\n"},"dateCreated":"2016-08-01T22:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2381","dateFinished":"2016-08-01T22:32:09+0000","dateStarted":"2016-08-01T22:32:09+0000"},{"dateUpdated":"2016-08-01T22:32:09+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470089905738_2089874923","id":"20160531-234527_1909965823","dateCreated":"2016-08-01T22:18:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2382"}],"name":"Lab 201 (Deprecated): Machine Learning with Spark (Beginner)","id":"2BU92U2NH","lastReplName":{"value":"md"},"angularObjects":{"2BRHYDE45:shared_process":[],"2BQVH8HWF:shared_process":[],"2BTZ65EZ1:shared_process":[],"2BSTTAPCN:shared_process":[],"2BU44EEGW:shared_process":[],"2BSJHPYU8:shared_process":[],"2BTEBDBMC:shared_process":[],"2BQNEXNZ9:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}