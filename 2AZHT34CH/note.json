{
  "paragraphs": [
    {
      "text": "%pyspark\na\u003d(1,2,3,4,5,10)\nprint a",
      "dateUpdated": "Sep 16, 2015 1:51:11 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440904116213_-249339383",
      "id": "20150829-230836_682155969",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "(1, 2, 3, 4, 5, 10)\n"
      },
      "dateCreated": "Aug 29, 2015 11:08:36 PM",
      "dateStarted": "Sep 16, 2015 1:51:11 AM",
      "dateFinished": "Sep 16, 2015 1:52:02 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport numpy as np\nzeroArray \u003d np.zeros( (2,4) )\nprint zeroArray\noneArray \u003d np.ones( (2,3) )  \nprint oneArray      \nemptyArray \u003d np.empty( (2,3) ) \nprint emptyArray\n\nfoo \u003d [ [1,2,3],\n        [4,5,6]]\n\nmyArray \u003d np.array(foo)\nprint myArray       \nrangeArray \u003d np.arange(6,12).reshape( (2,3) ) \nprint rangeArray    \nprint np.arange(6,12) \nprint rangeArray.reshape( (3,2) )\nmatA \u003d np.array( [[1,2],[3,4]] )\nmatB \u003d np.array( [[5,6],[7,8]] )\nprint np.dot(matA,matB) ",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440904133671_1927752139",
      "id": "20150829-230853_1727663297",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "[[ 0.  0.  0.  0.]\n [ 0.  0.  0.  0.]]\n[[ 1.  1.  1.]\n [ 1.  1.  1.]]\n[[ 0.  0.  0.]\n [ 0.  0.  0.]]\n[[1 2 3]\n [4 5 6]]\n[[ 6  7  8]\n [ 9 10 11]]\n[ 6  7  8  9 10 11]\n[[ 6  7]\n [ 8  9]\n [10 11]]\n[[19 22]\n [43 50]]\n"
      },
      "dateCreated": "Aug 29, 2015 11:08:53 PM",
      "dateStarted": "Aug 29, 2015 11:16:25 PM",
      "dateFinished": "Aug 29, 2015 11:16:25 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport numpy as np\nfrom scipy import linalg\narr \u003d np.array([[1, 2],[3, 4]])\nprint linalg.det(arr)\narr \u003d np.array([[3, 2],[6, 4]])\nprint linalg.det(arr)\nprint linalg.det(np.ones((6, 6)))\narr \u003d np.array([[3, 2], [5, 4]])\nprint linalg.inv(arr)",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440904200750_346357539",
      "id": "20150829-231000_1895586158",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "-2.0\n0.0\n0.0\n[[ 2.  -1. ]\n [-2.5  1.5]]\n"
      },
      "dateCreated": "Aug 29, 2015 11:10:00 PM",
      "dateStarted": "Aug 29, 2015 11:17:55 PM",
      "dateFinished": "Aug 29, 2015 11:17:55 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ntime_step \u003d 0.02\nperiod \u003d 5.\ntime_vec \u003d np.arange(0, 20, time_step)\nsig \u003d np.sin(2 * np.pi / period * time_vec) + 0.5 * np.random.randn(time_vec.size)\nfrom scipy import fftpack\nsample_freq \u003d fftpack.fftfreq(sig.size, d\u003dtime_step)\nsig_fft \u003d fftpack.fft(sig)\npidxs \u003d np.where(sample_freq \u003e 0)\nfreqs \u003d sample_freq[pidxs]\npower \u003d np.abs(sig_fft)[pidxs]\nfreq \u003d freqs[power.argmax()]\nnp.allclose(freq, 1./period)\nsig_fft[np.abs(sample_freq) \u003e freq] \u003d 0\nmain_sig \u003d fftpack.ifft(sig_fft)\n\nfrom scipy import misc",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440904535782_-286293891",
      "id": "20150829-231535_1640681026",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Aug 29, 2015 11:15:35 PM",
      "dateStarted": "Aug 29, 2015 11:25:50 PM",
      "dateFinished": "Aug 29, 2015 11:25:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n#import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn import datasets, linear_model\n\ndiabetes \u003d datasets.load_diabetes()\n\n\n# Use only one feature\ndiabetes_X \u003d diabetes.data[:, np.newaxis]\ndiabetes_X_temp \u003d diabetes_X[:, :, 2]\n\n# Split the data into training/testing sets\ndiabetes_X_train \u003d diabetes_X_temp[:-20]\ndiabetes_X_test \u003d diabetes_X_temp[-20:]\n\n# Split the targets into training/testing sets\ndiabetes_y_train \u003d diabetes.target[:-20]\ndiabetes_y_test \u003d diabetes.target[-20:]\n\n# Create linear regression object\nregr \u003d linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit(diabetes_X_train, diabetes_y_train)\n\n# The coefficients\nprint(\u0027Coefficients: \u0027, regr.coef_)\n\nprint(\"Residual sum of squares: %.2f\"\n      % np.mean((regr.predict(diabetes_X_test) - diabetes_y_test) ** 2))\n# Explained variance score: 1 is perfect prediction\nprint(\u0027Variance score: %.2f\u0027 % regr.score(diabetes_X_test, diabetes_y_test))\n\n",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440904711411_-1169633038",
      "id": "20150829-231831_512671959",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "(\u0027Coefficients: \u0027, array([ 938.23786125]))\nResidual sum of squares: 2548.07\nVariance score: 0.47\n"
      },
      "dateCreated": "Aug 29, 2015 11:18:31 PM",
      "dateStarted": "Aug 29, 2015 11:36:50 PM",
      "dateFinished": "Aug 29, 2015 11:36:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440905554577_1416077664",
      "id": "20150829-233234_748665068",
      "dateCreated": "Aug 29, 2015 11:32:34 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Pyspark test",
  "id": "2AZHT34CH",
  "angularObjects": {
    "2AXXD78HM": [],
    "2B1R59H88": [],
    "2AY329ZPQ": [],
    "2AZM4DAHQ": [],
    "2AZEZWCV1": [],
    "2AYKF7E6R": [],
    "2AZRDHRNH": [],
    "2AZUTA4HS": [],
    "2B19RECJG": [],
    "2AYTQ97PA": [],
    "2B24WSHFV": [],
    "2B1UYEWXJ": [],
    "2B14Y16TJ": [],
    "2AZKNMH64": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}